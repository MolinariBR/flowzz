// Prisma schema for Flowzz API
// Referência: design.md §Database Schema, user-stories.md - All data models

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// CORE MODELS
// ================================

// User model - Central entity for authentication and user management
// Referência: user-stories.md Story 1.1, design.md §User Management
model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password_hash String
  nome          String
  role          Role     @default(USER)
  trial_ends_at DateTime?
  is_active     Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Trial and subscription info
  subscription_status SubscriptionStatus @default(TRIAL)
  plan_id            String?

  // PagBank integration fields
  pagbank_customer_id String? @unique // ID do cliente no PagBank
  telefone            String? // Telefone para cobrança
  documento          String? // CPF/CNPJ
  endereco           Json?   // Endereço completo (rua, numero, bairro, cidade, estado, cep)

  // Relations
  clients      Client[]
  tags         Tag[]
  sales        Sale[]
  ads          Ad[]
  integrations Integration[]
  reports      Report[]
  goals        Goal[]
  activities   Activity[]
  subscriptions Subscription[]
  payment_methods PaymentMethod[]
  refresh_tokens RefreshToken[]
  admin_actions AuditLog[] @relation("AdminActions")
  user_actions  AuditLog[] @relation("UserActions")
  plan         Plan?     @relation(fields: [plan_id], references: [id])

  // Indexes for performance
  @@index([email])
  @@index([subscription_status])
  @@index([trial_ends_at])
  @@map("users")
}

// RefreshToken model - For JWT authentication
// Referência: tasks.md Task 2.1.1, design.md Authentication Flow
model RefreshToken {
  id         String   @id @default(uuid())
  token      String   @unique
  user_id    String
  expires_at DateTime
  created_at DateTime @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // Indexes for performance
  @@index([token])
  @@index([user_id])
  @@index([expires_at])
  @@map("refresh_tokens")
}

// Client model - Customer data imported from Coinzz
// Referência: user-stories.md Story 3.1, plan.md §Client Management
model Client {
  id             String    @id @default(uuid())
  user_id        String
  name           String
  email          String?
  phone          String?
  cpf            String?
  address        String?
  city           String?
  state          String?
  cep            String?
  status         ClientStatus @default(ACTIVE)
  external_id    String?   // ID from Coinzz
  total_spent    Decimal   @default(0) @db.Decimal(10, 2)
  total_orders   Int       @default(0)
  last_order_at  DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  // Relations
  user  User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  sales Sale[]
  tags  ClientTag[]

  // Indexes
  @@index([user_id])
  @@index([status])
  @@index([external_id])
  @@index([email])
  @@unique([user_id, email])
  @@map("clients")
}

// Tag model - Custom labels for organizing clients
// Referência: user-stories.md Story 3.2
model Tag {
  id         String   @id @default(uuid())
  user_id    String
  name       String
  color      String   @default("#3B82F6") // Default blue color
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user    User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  clients ClientTag[]

  // Indexes
  @@index([user_id])
  @@unique([user_id, name])
  @@map("tags")
}

// Many-to-many relation between clients and tags
model ClientTag {
  id        String   @id @default(uuid())
  client_id String
  tag_id    String
  created_at DateTime @default(now())

  // Relations
  client Client @relation(fields: [client_id], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  // Indexes
  @@unique([client_id, tag_id])
  @@map("client_tags")
}

// Sale model - Transaction data from Coinzz
// Referência: user-stories.md Story 2.1, plan.md §Financial Tracking
model Sale {
  id              String     @id @default(uuid())
  user_id         String
  client_id       String?
  external_id     String?    // ID from Coinzz
  product_name    String
  product_sku     String?
  quantity        Int        @default(1)
  unit_price      Decimal    @db.Decimal(10, 2)
  total_price     Decimal    @db.Decimal(10, 2)
  commission      Decimal?   @db.Decimal(10, 2)
  status          SaleStatus @default(PENDING)
  payment_method  String?
  payment_due_date DateTime?
  payment_date    DateTime?
  shipped_at      DateTime?
  delivered_at    DateTime?
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt

  // Relations
  user   User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  client Client? @relation(fields: [client_id], references: [id])

  // Indexes
  @@index([user_id])
  @@index([client_id])
  @@index([status])
  @@index([external_id])
  @@index([created_at])
  @@map("sales")
}

// ================================
// INTEGRATIONS
// ================================

// Integration model - External service connections
// Referência: design.md §External Integrations
model Integration {
  id         String            @id @default(uuid())
  user_id    String
  provider   IntegrationProvider
  status     IntegrationStatus @default(PENDING)
  config     Json              // Store encrypted credentials and settings
  last_sync  DateTime?
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // Indexes
  @@index([user_id])
  @@index([provider])
  @@unique([user_id, provider])
  @@map("integrations")
}

// Ad model - Facebook Ads data
// Referência: user-stories.md Story 2.2, design.md §Facebook Integration
model Ad {
  id            String   @id @default(uuid())
  user_id       String
  external_id   String   // Facebook Ad ID
  campaign_name String
  ad_set_name   String?
  ad_name       String
  status        String
  spend         Decimal  @db.Decimal(10, 2)
  impressions   Int      @default(0)
  clicks        Int      @default(0)
  ctr           Decimal? @db.Decimal(5, 4) // Click-through rate
  cpc           Decimal? @db.Decimal(10, 2) // Cost per click
  date          DateTime
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // Indexes
  @@index([user_id])
  @@index([external_id])
  @@index([date])
  @@unique([user_id, external_id, date])
  @@map("ads")
}

// ================================
// REPORTS & ANALYTICS
// ================================

// Report model - Generated reports and projections
// Referência: user-stories.md Story 4.1, plan.md §Financial Analysis
model Report {
  id         String     @id @default(uuid())
  user_id    String
  type       ReportType
  title      String
  filters    Json       // Store report filters and parameters
  data       Json       // Store calculated results
  file_url   String?    // URL to generated PDF/Excel file
  created_at DateTime   @default(now())
  expires_at DateTime?  // For temporary reports

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // Indexes
  @@index([user_id])
  @@index([type])
  @@index([created_at])
  @@map("reports")
}

// Goal model - User-defined financial goals
// Referência: user-stories.md Story 4.2
model Goal {
  id          String     @id @default(uuid())
  user_id     String
  title       String
  description String?
  target_type GoalTargetType
  target_value Decimal   @db.Decimal(12, 2)
  current_value Decimal  @default(0) @db.Decimal(12, 2)
  period_type PeriodType
  period_start DateTime
  period_end   DateTime
  is_active   Boolean    @default(true)
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // Indexes
  @@index([user_id])
  @@index([is_active])
  @@index([period_end])
  @@map("goals")
}

// ================================
// BILLING & SUBSCRIPTIONS
// ================================

// Plan model - Subscription plans
// Referência: plan.md §Pricing Plans
model Plan {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  price       Decimal  @db.Decimal(8, 2)
  currency    String   @default("BRL")
  interval    String   @default("month") // month, year
  features    Json     // Store plan features as JSON
  limits      Json     // Store usage limits
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  users         User[]
  subscriptions Subscription[]

  @@map("plans")
}

// Subscription model - User subscription history
model Subscription {
  id                String             @id @default(uuid())
  user_id           String
  plan_id           String
  status            SubscriptionStatus @default(ACTIVE)
  current_period_start DateTime
  current_period_end   DateTime
  trial_end         DateTime?
  cancel_at         DateTime?
  canceled_at       DateTime?
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt

  // PagBank integration fields
  pagbank_subscription_id String? @unique // ID da assinatura no PagBank
  pagbank_status         String? // Status no PagBank (ACTIVE, SUSPENDED, CANCELED, etc.)
  last_payment_date      DateTime? // Data do último pagamento bem-sucedido
  next_payment_date      DateTime? // Data do próximo pagamento
  payment_method         Json? // Dados do método de pagamento (tipo, últimos dígitos, etc.)

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  plan Plan @relation(fields: [plan_id], references: [id])

  // Indexes
  @@index([user_id])
  @@index([status])
  @@index([current_period_end])
  @@index([pagbank_subscription_id])
  @@map("subscriptions")
}

// PaymentMethod model - Secure payment method storage
model PaymentMethod {
  id                String   @id @default(uuid())
  user_id           String
  type              String   // 'credit_card', 'pix', 'boleto'
  pagbank_token     String?  @unique // Token criptografado do PagBank
  last_four_digits  String?  // Últimos 4 dígitos do cartão
  brand             String?  // Visa, Mastercard, etc.
  expiry_month      Int?     // Mês de expiração
  expiry_year       Int?     // Ano de expiração
  is_default        Boolean  @default(false)
  is_active         Boolean  @default(true)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // Indexes
  @@index([user_id])
  @@index([pagbank_token])
  @@map("payment_methods")
}

// ================================
// ACTIVITY & AUDIT
// ================================

// Activity model - User activity log for audit
model Activity {
  id          String      @id @default(uuid())
  user_id     String
  action      String      // e.g., "login", "create_client", "generate_report"
  entity_type String?     // e.g., "client", "report", "integration"
  entity_id   String?
  metadata    Json?       // Additional data about the action
  ip_address  String?
  user_agent  String?
  created_at  DateTime    @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // Indexes
  @@index([user_id])
  @@index([action])
  @@index([created_at])
  @@map("activities")
}

// ================================
// ENUMS
// ================================

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum SaleStatus {
  PENDING     // Aguardando pagamento
  PAID        // Pago
  SHIPPED     // Enviado
  DELIVERED   // Entregue
  CANCELED    // Cancelado
  REFUNDED    // Estornado
}

enum IntegrationProvider {
  COINZZ
  FACEBOOK_ADS
  WHATSAPP
  PAGBANK
}

enum IntegrationStatus {
  PENDING
  CONNECTED
  ERROR
  DISCONNECTED
}

enum ReportType {
  FINANCIAL_SUMMARY
  CLIENT_ANALYSIS
  SALES_REPORT
  PROJECTION_REPORT
  CUSTOM
}

enum GoalTargetType {
  REVENUE
  PROFIT
  ORDERS
  CLIENTS
  CUSTOM
}

enum PeriodType {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

// ================================
// AUDIT LOG MODEL
// ================================

// AuditLog model - Track admin actions for security and compliance
// Referência: tasks.md Task 11.2.3, design.md Security - Audit Logs
model AuditLog {
  id            String   @id @default(uuid())
  admin_id      String
  action        String   // suspend, reactivate, impersonate, update, delete, reset_password
  target_user_id String?
  details       Json?    // Detalhes adicionais da ação
  ip_address    String?
  user_agent    String?
  created_at    DateTime @default(now())

  // Relations
  admin User @relation("AdminActions", fields: [admin_id], references: [id], onDelete: Cascade)
  target_user User? @relation("UserActions", fields: [target_user_id], references: [id], onDelete: SetNull)

  // Indexes for performance
  @@index([admin_id])
  @@index([target_user_id])
  @@index([action])
  @@index([created_at])
  @@map("audit_logs")
}